diff --git a/emscriptenbuild/build.sh b/emscriptenbuild/build.sh
index 4a90fd2..e80f362 100755
--- a/emscriptenbuild/build.sh
+++ b/emscriptenbuild/build.sh
@@ -31,5 +31,13 @@ fi
 # Before building, remove any ../libgit2/src/transports/emscriptenhttp.c left from running setup.sh 
 [ -f "../libgit2/src/libgit2/transports/emscriptenhttp-async.c" ] && rm ../libgit2/src/libgit2/transports/emscriptenhttp-async.c
 
-emcmake cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_FLAGS="$EXTRA_CMAKE_C_FLAGS  --pre-js $(pwd)/pre.js $POST_JS -s \"EXTRA_EXPORTED_RUNTIME_METHODS=['FS','callMain']\" -lnodefs.js -lidbfs.js -s INVOKE_RUN=0 -s ALLOW_MEMORY_GROWTH=1 -s STACK_SIZE=131072" -DREGEX_BACKEND=regcomp -DSONAME=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DTHREADSAFE=OFF -DUSE_SSH=OFF -DBUILD_CLAR=OFF -DBUILD_EXAMPLES=ON ../libgit2
+emcmake cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_FLAGS="$EXTRA_CMAKE_C_FLAGS --extern-pre-js $(pwd)/pre.js $POST_JS -s \"EXPORTED_RUNTIME_METHODS=['FS','callMain']\" -s INVOKE_RUN=0 -sINITIAL_MEMORY=256MB -s STACK_SIZE=131072 -sENVIRONMENT=node -Wall -Wunused-command-line-argument" -DSONAME=OFF -DUSE_HTTPS=OFF -DBUILD_SHARED_LIBS=OFF -DTHREADSAFE=OFF -DUSE_SSH=OFF -DBUILD_CLAR=OFF -DBUILD_EXAMPLES=ON ../libgit2
 emmake make lg2
+
+# 替换不支持的内容
+cd examples
+sed -i "s/require(.fs.)/wx.getFileSystemManager()/g" ./lg2.js
+sed -i "s/require(.path.)/getPathAdapter()/g" ./lg2.js
+sed -i 's/getBinaryPromise()\./getWasmFilePath()./g' ./lg2.js
+
+brotli -f ./lg2.wasm
diff --git a/emscriptenbuild/post-async.js b/emscriptenbuild/post-async.js
index 87a23bd..4fe677e 100644
--- a/emscriptenbuild/post-async.js
+++ b/emscriptenbuild/post-async.js
@@ -12,6 +12,25 @@
 const emscriptenhttpconnections = {};
 let httpConnectionNo = 0;
 
+function wxRequest(url, method, headers) {
+
+    return async function(data = undefined) {
+        let requestTask;
+        let response =  await (new Promise((resolve, reject) => {
+            requestTask = wx.request({
+                url,
+                method,
+                data,
+                responseType: 'arraybuffer',
+                header: headers,
+                success: resolve,
+                fail: reject
+            });
+        }));
+        return { response, requestTask }
+    }
+}
+
 const chmod = FS.chmod;
     
 FS.chmod = function(path, mode, dontFollow) { 
@@ -24,179 +43,82 @@ FS.chmod = function(path, mode, dontFollow) {
     }
 };
 
-if(ENVIRONMENT_IS_WEB) {
-    Module.origCallMain = Module.callMain;
-    Module.callMain = async (args) => {
-        await Module.origCallMain(args);
-        if (typeof Asyncify === 'object' && Asyncify.currData) {            
-            await Asyncify.whenDone();
-        }
-    };
-
-    Object.assign(Module, {
-        emscriptenhttpconnect: async function(url, buffersize, method, headers) {
-          let result = new Promise((resolve, reject) => {
-            if(!method) {
-              method = 'GET';
-            }
-
-            const xhr = new XMLHttpRequest();
-            xhr.open(method, url, true);
-            xhr.responseType = 'arraybuffer';
+Module.origCallMain = Module.callMain;
+Module.callMain = async (args) => {
+    await Module.origCallMain(args);
+    if (typeof Asyncify === 'object' && Asyncify.currData) {            
+        await Asyncify.whenDone();
+    }
+};
 
-            if (headers) {
-                Object.keys(headers).forEach(header => xhr.setRequestHeader(header, headers[header]));
-            }
+Object.assign(Module, {
+    emscriptenhttpconnect: async function(url, buffersize, method, headers) {
+        let result = new Promise((resolve, reject) => {
+        if(!method) {
+            method = 'GET';
+        }
 
-            emscriptenhttpconnections[httpConnectionNo] = {
-                xhr: xhr,
-                resultbufferpointer: 0,
-                buffersize: buffersize
-            };
-            
-            if(method === 'GET') {
-              xhr.onload = function () {
+        const requestFn = wxRequest(url, method, headers);
+        emscriptenhttpconnections[httpConnectionNo] = {
+            request: requestFn,
+            resultbufferpointer: 0,
+            buffersize: buffersize
+        }
+        let connection = emscriptenhttpconnections[httpConnectionNo];
+        if (method === "GET") {
+            requestFn().then((res) => {
+                connection.requestResult = res;
                 resolve(httpConnectionNo++);
-              };
-              xhr.send();
-            } else {
-              resolve(httpConnectionNo++);
-            }
-          });
-          return result;
-        },
-        emscriptenhttpwrite: function(connectionNo, buffer, length) {
-            const connection = emscriptenhttpconnections[connectionNo];
-            const buf = new Uint8Array(Module.HEAPU8.buffer,buffer,length).slice(0);
-            if(!connection.content) {
-                connection.content = buf;
-            } else {
-                const content = new Uint8Array(connection.content.length + buf.length);
-                content.set(connection.content);
-                content.set(buf, connection.content.length);
-                connection.content = content;
-            }            
-        },
-        emscriptenhttpread: async function(connectionNo, buffer, buffersize) {
-          const connection = emscriptenhttpconnections[connectionNo];
-
-          function handleResponse(connection, buffer, buffersize) {
-            let bytes_read = connection.xhr.response.byteLength - connection.resultbufferpointer;
-            if (bytes_read > buffersize) {
-              bytes_read = buffersize;
-            }
-            const responseChunk = new Uint8Array(connection.xhr.response, connection.resultbufferpointer, bytes_read);
-            writeArrayToMemory(responseChunk, buffer);
-            connection.resultbufferpointer += bytes_read;
-            return bytes_read;
-          }
-
-          let result = new Promise((resolve) => {
-              if(connection.content) {
-                    connection.xhr.onload = function () {
-                    resolve(handleResponse(connection, buffer, buffersize));
-                };
-                connection.xhr.send(connection.content.buffer);
-                connection.content = null;
-              } else {
-                resolve(handleResponse(connection, buffer, buffersize));
-              }
-          });
-
-          return result;
-        },
-        emscriptenhttpfree: function(connectionNo) {
-            delete emscriptenhttpconnections[connectionNo];
+            });
+        } else {
+            resolve(httpConnectionNo++);
+        }
+        });
+        return result;
+    },
+    emscriptenhttpwrite: function(connectionNo, buffer, length) {
+        const connection = emscriptenhttpconnections[connectionNo];
+        const buf = new Uint8Array(Module.HEAPU8.buffer, buffer, length).slice(0);
+        if(!connection.content) {
+            connection.content = buf;
+        } else {
+            const content = new Uint8Array(connection.content.length + buf.length);
+            content.set(connection.content);
+            content.set(buf, connection.content.length);
+            connection.content = content;
+        }     
+    },
+    emscriptenhttpread: async function(connectionNo, buffer, buffersize) {
+        const connection = emscriptenhttpconnections[connectionNo];
+
+        function handleResponse(connection, buffer, buffersize) {
+        let bytes_read = connection.requestResult.response.data.byteLength - connection.resultbufferpointer;
+        if (bytes_read > buffersize) {
+            bytes_read = buffersize;
+        }
+        const responseChunk = new Uint8Array(connection.requestResult.response.data, connection.resultbufferpointer, bytes_read);
+        writeArrayToMemory(responseChunk, buffer);
+        connection.resultbufferpointer += bytes_read;
+        return bytes_read;
         }
-    });
-} else if(ENVIRONMENT_IS_NODE) {
-    const { Worker } = require('worker_threads');
-
-    Object.assign(Module, {
-        emscriptenhttpconnect: function(url, buffersize, method, headers) {
-            const statusArray = new Int32Array(new SharedArrayBuffer(4));
-            Atomics.store(statusArray, 0, method === 'POST' ? -1 : 0);
-        
-            const resultBuffer = new SharedArrayBuffer(buffersize);
-            const resultArray = new Uint8Array(resultBuffer);
-            const workerData =  {
-                    statusArray: statusArray,
-                    resultArray: resultArray,
-                    url: url,
-                    method: method ? method: 'GET',
-                    headers: headers
-            };  
-
-            new Worker('(' + (function requestWorker() {
-                const { workerData } = require('worker_threads');
-                const req = require(workerData.url.indexOf('https') === 0 ? 'https' : 'http')
-                              .request(workerData.url, {
-                    headers: workerData.headers,
-                    method: workerData.method
-                }, (res) => {
-                    res.on('data', chunk => {
-                        const previousStatus = workerData.statusArray[0];
-                        if(previousStatus !== 0) {
-                            Atomics.wait(workerData.statusArray, 0, previousStatus);
-                        }                    
-                        workerData.resultArray.set(chunk);                    
-                        Atomics.store(workerData.statusArray, 0, chunk.length);
-                        Atomics.notify(workerData.statusArray, 0, 1);
-                    });
-                });        
-
-                if(workerData.method === 'POST') {
-                    while(workerData.statusArray[0] !== 0) {
-                        Atomics.wait(workerData.statusArray, 0, -1);
-                        const length = workerData.statusArray[0];
-                        if(length === 0) {
-                            break;
-                        }
-                        req.write(Buffer.from(workerData.resultArray.slice(0, length)));
-                        Atomics.store(workerData.statusArray, 0, -1);
-                        Atomics.notify(workerData.statusArray, 0, 1);
-                    }
-                }
-                
-                req.end();
-            }).toString()+')()' , {
-                eval: true,
-                workerData: workerData
-            }); 
-            emscriptenhttpconnections[httpConnectionNo] = workerData;
-            console.log('connected with method', workerData.method, 'to', workerData.url);
-            return httpConnectionNo++;
-        },
-        emscriptenhttpwrite: function(connectionNo, buffer, length) {
-            const connection = emscriptenhttpconnections[connectionNo];
-            connection.resultArray.set(new Uint8Array(Module.HEAPU8.buffer,buffer,length));
-            Atomics.store(connection.statusArray, 0, length);
-            Atomics.notify(connection.statusArray, 0, 1);
-            // Wait for write to finish
-            Atomics.wait(connection.statusArray, 0, length);
-        },
-        emscriptenhttpread: function(connectionNo, buffer) { 
-            const connection = emscriptenhttpconnections[connectionNo];
 
-            if(connection.statusArray[0] === -1 && connection.method === 'POST') {
-                // Stop writing
-                Atomics.store(connection.statusArray, 0, 0);
-                Atomics.notify(connection.statusArray, 0, 1);
+        let result = new Promise((resolve) => {
+            if(connection.content) {
+            connection.request(connection.content.buffer).then((res) => {
+                connection.requestResult = res;
+                resolve(handleResponse(connection, buffer, buffersize));
+            });
+            connection.content = null;
+            } else {
+            resolve(handleResponse(connection, buffer, buffersize));
             }
-            Atomics.wait(connection.statusArray, 0, 0);
-            const bytes_read = connection.statusArray[0];
-
-            writeArrayToMemory(connection.resultArray.slice(0, bytes_read), buffer);
-
-            //console.log('read with connectionNo', connectionNo, 'length', bytes_read, 'content',
-            //        new TextDecoder('utf-8').decode(connection.resultArray.slice(0, bytes_read)));
-            Atomics.store(connection.statusArray, 0, 0);
-            Atomics.notify(connection.statusArray, 0, 1);
-
-            return bytes_read;
-        },
-        emscriptenhttpfree: function(connectionNo) {
-            delete emscriptenhttpconnections[connectionNo];
-        }
-    });
-}
\ No newline at end of file
+        });
+
+        return result;
+    },
+    emscriptenhttpfree: function(connectionNo) {
+        let connection = emscriptenhttpconnections[connectionNo];
+        connection.requestResult.requestTask.abort();
+        delete emscriptenhttpconnections[connectionNo];
+    }
+});
\ No newline at end of file
diff --git a/emscriptenbuild/pre.js b/emscriptenbuild/pre.js
index b9b6dba..84e18b8 100644
--- a/emscriptenbuild/pre.js
+++ b/emscriptenbuild/pre.js
@@ -1,3 +1,44 @@
+const WASM_FILE_PATH = "";
+const WebAssembly = WXWebAssembly;
+const __dirname = "";
+const process = {
+    on: (eventName, listener) => {
+        if (eventName == "uncaughtException") {
+            wx.onError(listener);
+        } else if (eventName == "unhandledRejection") {
+            wx.onUnhandledRejection(listener);
+        }
+    },
+    argv: [],
+    exit(status) {
+        console.log("Exit", status);
+    },
+    hrtime() {
+        return [0, 0];
+    }
+};
+const crypto = {
+    getRandomValues: function(arr) {
+        for (var i = 0; i < arr.length; i++) {
+            arr[i] = (Math.random() * 256) | 0;
+        }
+    }
+}
+
+function getWasmFilePath() {
+    return Promise.resolve(WASM_FILE_PATH);
+}
+
+function getPathAdapter() {
+    return {
+        normalize(filename) {
+            return filename;
+        },
+        dirname() {
+            return "";
+        }
+    }
+}
 
 if (!Module.print && !Module.printErr) {
     let capturedOutput = null;
